ARG BUILD_FROM
FROM $BUILD_FROM
LABEL maintainer="Michael Hansen <hansen.mike@gmail.com>"

ARG BUILD_ARCH
ARG CPU_ARCH
ENV LANG C.UTF-8

ARG MAKE_THREADS=4

WORKDIR /

COPY etc/qemu-arm-static /usr/bin/
COPY etc/qemu-aarch64-static /usr/bin/

RUN apt-get update && \
    apt-get install -y bash jq unzip \
                       build-essential portaudio19-dev swig \
                       libatlas-base-dev \
                       sox espeak flite alsa-utils \
                       cmake git \
                       autoconf libtool automake bison \
                       sphinxbase-utils sphinxtrain

# Install phonetisaurus (with openfst 1.6.2)
COPY download/openfst-1.6.9.tar.gz /
RUN cd / && tar -xzf openfst-1.6.9.tar.gz && \
    cd /openfst-1.6.9 && \
    ./configure --enable-static --enable-shared --enable-far --enable-ngram-fsts && \
    make -j $MAKE_THREADS && \
    make install && \
    rm -rf /openfst*

COPY download/phonetisaurus-2019.zip /phonetisaurus.zip
RUN cd / && unzip phonetisaurus.zip
RUN cd /phonetisaurus && \
    ./configure && \
    make -j $MAKE_THREADS && \
    make install && \
    rm -rf /phonetisaurus*

# Install mitlm
RUN apt-get install -y gfortran
COPY download/mitlm-0.4.2.tar.xz /
RUN cd / && tar -xf mitlm-0.4.2.tar.xz && cd mitlm-0.4.2/ && \
    ./configure && \
    make -j $MAKE_THREADS && \
    make install && \
    rm -rf /mitlm-0.4.2*

# Install Python dependencies
RUN python3 -m pip install --no-cache-dir wheel
COPY requirements.txt /requirements.txt
RUN python3 -m pip install --no-cache-dir -r /requirements.txt

# Install Pocketsphinx Python module with no sound
COPY download/pocketsphinx-python.tar.gz /
RUN python3 -m pip install --no-cache-dir /pocketsphinx-python.tar.gz && \
    rm -rf /pocketsphinx-python*

# Install fixed PyJSGF library
COPY download/pyjsgf-1.6.0.tar.gz /
RUN python3 -m pip install /pyjsgf-1.6.0.tar.gz && \
    rm /pyjsgf-1.6.0.tar.gz

# Install snowboy
COPY download/snowboy-1.3.0.tar.gz /
RUN if [ "$BUILD_ARCH" != "aarch64" ]; then pip3 install --no-cache-dir /snowboy-1.3.0.tar.gz; fi

# Install Mycroft Precise
COPY download/precise-engine_0.2.0_${CPU_ARCH}.tar.gz /precise-engine.tar.gz
RUN if [ "$BUILD_ARCH" != "aarch64" ]; then \
    cd / && tar -xzf /precise-engine.tar.gz && \
    ln -s /precise-engine/precise-engine /usr/bin/precise-engine && \
    rm /precise-engine.tar.gz; \
    fi

RUN apt-get install -y flite

RUN ldconfig

# Copy bw and mllr_solve to /usr/bin
RUN find / -name bw -exec cp '{}' /usr/bin/ \;
RUN find / -name mllr_solve -exec cp '{}' /usr/bin/ \;

ENV RHASSPY_APP /usr/share/rhasspy

# Copy script to run
COPY docker/run.sh /run.sh
RUN chmod +x /run.sh



COPY profiles/en/ ${RHASSPY_APP}/profiles/en/

COPY profiles/defaults.json /${RHASSPY_APP}/profiles/
COPY docker/rhasspy /${RHASSPY_APP}/bin/
COPY dist/ /${RHASSPY_APP}/dist/
COPY etc/wav/* /${RHASSPY_APP}/etc/wav/
COPY rhasspy/profile_schema.json /${RHASSPY_APP}/rhasspy/
COPY *.py /${RHASSPY_APP}/
COPY rhasspy/*.py /${RHASSPY_APP}/rhasspy/

ENV CONFIG_PATH /data/options.json

ENTRYPOINT ["/run.sh"]